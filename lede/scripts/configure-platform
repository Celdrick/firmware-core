#!/bin/bash

architecture="$1"
work_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )
platform_dir="${work_dir}/lede"
build_dir="${work_dir}/build"
checkout_dir="${build_dir}/lede"

if [ -z "${architecture}" ]; then
  echo "ERROR: Missing architecture!"
  exit 1
fi

if [[ ! -d ${build_dir} || ! -f ${checkout_dir}/.label ]]; then
  echo "ERROR: Platform has not yet been prepared!"
  exit 1
fi

echo "Building for architecture: ${architecture}"
if [ ! -f ${platform_dir}/configs/${architecture} ]; then
  echo "ERROR: Architecture missing configuration file, aborting."
  exit 1
fi

# Check packages that we need to build
all_packages=$(grep 'Package:' ${checkout_dir}/feeds/nodewatcher.index | cut -d ':' -f 2)
all_packages="${all_packages} $(cat ${platform_dir}/packages | cut -d '@' -f 1)"

# Cleanup previous build leftovers
echo "Cleaning up previous build leftovers..."
rm -rf ${build_dir}/release/*

# Generate build configuration
echo "Generating build configuration..."
kconfig=${checkout_dir}/scripts/kconfig.pl
config_dir=${platform_dir}/configs
config=${checkout_dir}/config.${architecture}
$kconfig 'm+' ${config_dir}/generic ${config_dir}/${architecture} > ${config}

# Configure package mirror
echo "CONFIG_LOCALMIRROR=\"${FW_MIRROR_URL:-http://bindist.wlan-si.net/mirror/}\"" >> ${config}

# Configure binary distribution repository
fw_version=$(cat ${checkout_dir}/package/base-files/files/etc/version)
lede_version=$(cat ${checkout_dir}/.label)
if [[ -z "${fw_version}" || -z "${lede_version}" ]]; then
  echo "ERROR: Missing firmware and/or OpenWrt version!"
  exit 1
fi
echo "CONFIG_VERSION_REPO=\"http://${FW_PACKAGE_HOST:-packages.wlan-si.net}/firmware/${fw_version}/lede/${lede_version}/${architecture}\"" >> ${config}

# Include all common packages
for pkg in ${all_packages}; do
  echo "CONFIG_PACKAGE_${pkg}=m" >> ${config}
done

# Remove configuration file already present in the generic build dir
rm -f ${checkout_dir}/.config

# Prepare configuration file
echo "Preparing default configuration file..."
cd ${checkout_dir}
cp config.${architecture} .config
make defconfig || {
  echo "ERROR: Default configuration preparation has failed!"
  exit 1
}

# Include kernel build options
awk '/^(#[[:space:]]+)?CONFIG_KERNEL/' config.${architecture} >> .config

# Build tools
echo "Building tools..."
make tools/install || {
  echo "ERROR: Failed to build tools!"
  exit 1
}

echo > ${checkout_dir}/.platform_configured
